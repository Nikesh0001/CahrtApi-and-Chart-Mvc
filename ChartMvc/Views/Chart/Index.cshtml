@model List<DTOChart>

<!DOCTYPE html>
<html>
<head>
    <title>Chart Index</title>
    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <h1>Chart Index</h1>

    <div>
        <!-- Bar Chart for Approved, Rejected, and Pending Status -->
        <canvas id="statusBarChart" width="400" height="200"></canvas>
    </div>

    <div>
        <!-- Pie Chart for EntityName -->
        <canvas id="entityPieChart" width="400" height="200"></canvas>
    </div>

    <script>
        // Retrieve the serialized JSON data from ViewBag
        var chartData = @Html.Raw(ViewBag.JsonChartData);

        // Extracting status and entity names for chart data
        var statusLabels = chartData.map(item => item.ApprovalStatus);
        var entityNames = chartData.map(item => item.EntityName);

        // Count occurrences of each status
        var statusCounts = statusLabels.reduce((acc, status) => {
            acc[status] = (acc[status] || 0) + 1;
            return acc;
        }, {});

        // Bar Chart
        var statusBarChartCanvas = document.getElementById('statusBarChart').getContext('2d');
        new Chart(statusBarChartCanvas, {
            type: 'bar',
            data: {
                labels: Object.keys(statusCounts),
                datasets: [{
                    label: 'Status Count',
                    data: Object.values(statusCounts),
                    backgroundColor: ['green', 'red', 'yellow'], // Adjust colors as needed
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Pie Chart
        var entityPieChartCanvas = document.getElementById('entityPieChart').getContext('2d');
        new Chart(entityPieChartCanvas, {
            type: 'pie',
            data: {
                labels: [...new Set(entityNames)], // Get unique entity names
                datasets: [{
                    data: entityNames.map(name => entityNames.filter(n => n === name).length),
                    backgroundColor: getRandomColors(entityNames.length), // Function to generate random colors
                }]
            },
        });

        // Function to generate random colors
        function getRandomColors(count) {
            var colors = [];
            for (var i = 0; i < count; i++) {
                var color = '#' + (Math.random().toString(16) + '0000000').slice(2, 8);
                colors.push(color);
            }
            return colors;
        }
    </script>
</body>
</html>
